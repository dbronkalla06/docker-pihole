name: build docker image

on:
  push:
# pull_request:
# workflow_dispatch:

jobs:
# env:
#   EXAMPLE: 1

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup docker buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          qemu-version: latest
          buildx-version: latest

      - name: setup docker cache
        uses: actions/cache@v2
        id: cache
        with:
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          path: /tmp/buildx-cache
          restore-keys: ${{ runner.os }}-buildx-

      - name: configure build
        id: config
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo ::set-output name=version::${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            echo ::set-output name=version::latest
          elif [[ $GITHUB-REF == refs/heads/* ]]; then
            echo ::set-output name=version::${GITHUB_REF#refs/heads/}
          else
            echo ::set-output name=version::edge
          fi

          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          echo ::set-output name=docker_image::${DOCKERHUB_USERNAME}/pihole
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=gitref::${GITHUB_SHA::8}

      - name: print configuration
        run: |
          hostname -f
          echo HOME=$HOME
          echo GITHUB_REF=$GITHUB_REF
          echo GITHUB_SHA=$GITHUB_SHA
          echo version=${{ steps.config.outputs.version }}
          echo docker_platforms=${{ steps.config.outputs.docker_platforms }}
          echo available_platforms=${{ steps.buildx.outputs.platforms }}

      - name: build docker image
        run: |
          docker buildx build \
            --output      "type=image,push=false" \
            --cache-to    "type=local,dest=/tmp/buildx-cache" \
            --cache-from  "type=local,src=/tmp/buildx-cache" \
            --platform    "${{ steps.config.outputs.docker_platforms }}" \
            --tag         "${{ steps.config.outputs.docker_image}}:${{ steps.config.outputs.version }}" \
            .

      - name: docker hub login
        if: success()
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSwORD }}
        run: |
          echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin

      - name: push docker image
        if: success()
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker buildx build \
            --output      "type=image,push=true" \
            --cache-from  "type=local,src=/tmp/buildx-cache" \
            --platform    "${{ steps.config.outputs.docker_platforms }}" \
            --tag         "${{ steps.config.outputs.docker_image}}:${{ steps.config.outputs.version }}" \
            .

      - name: cleanup
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
